{"ast":null,"code":"var _jsxFileName = \"/home/ccon148/LogAnalyzer/src/main/webapp/src/components/ListLogFiles.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ListLogFiles = () => {\n  _s();\n  const [allLogFiles, setAllLogFiles] = useState([]);\n  const fetchLogFiles = async () => {\n    try {\n      const response = await fetch(\"/logFile/listLogFiles\", {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      const data = await response.json();\n      setAllLogFiles(data);\n    } catch (error) {\n      console.error(\"Error fetching log files:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Logfiles\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: allLogFiles.map(logFile => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: logFile.logFileName\n      }, logFile.logFileName, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n};\n_s(ListLogFiles, \"Veb65qzut5YAC/ez2m/aRSaEza8=\");\n_c = ListLogFiles;\nvar _c;\n$RefreshReg$(_c, \"ListLogFiles\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","ListLogFiles","_s","allLogFiles","setAllLogFiles","fetchLogFiles","response","fetch","method","headers","data","json","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","map","logFile","logFileName","_c","$RefreshReg$"],"sources":["/home/ccon148/LogAnalyzer/src/main/webapp/src/components/ListLogFiles.tsx"],"sourcesContent":["import React, { useState } from \"react\";\n\ninterface AllLogFiles {\n  logFileName: string;\n  logFilePath: string;\n  changed: Date;\n}\n\nexport const ListLogFiles = () => {\n  const [allLogFiles, setAllLogFiles] = useState<AllLogFiles[]>([]);\n\n  const fetchLogFiles = async () => {\n    try {\n      const response = await fetch(\"/logFile/listLogFiles\", {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      });\n      const data = await response.json();\n      setAllLogFiles(data);\n    } catch (error) {\n      console.error(\"Error fetching log files:\", error);\n    }\n  };\n\n  return (\n    <div>\n      <hr />\n      <h3>Logfiles</h3>\n      <ul>\n        {allLogFiles.map((logFile) => (\n          <li key={logFile.logFileName}>{logFile.logFileName}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAQxC,OAAO,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChC,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGN,QAAQ,CAAgB,EAAE,CAAC;EAEjE,MAAMO,aAAa,GAAG,MAAAA,CAAA,KAAY;IAChC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,uBAAuB,EAAE;QACpDC,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB;MACF,CAAC,CAAC;MACF,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;MAClCP,cAAc,CAACM,IAAI,CAAC;IACtB,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACnD;EACF,CAAC;EAED,oBACEZ,OAAA;IAAAc,QAAA,gBACEd,OAAA;MAAAe,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eACNlB,OAAA;MAAAc,QAAA,EAAI;IAAQ;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACjBlB,OAAA;MAAAc,QAAA,EACGX,WAAW,CAACgB,GAAG,CAAEC,OAAO,iBACvBpB,OAAA;QAAAc,QAAA,EAA+BM,OAAO,CAACC;MAAW,GAAzCD,OAAO,CAACC,WAAW;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAA2B,CACxD;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEV,CAAC;AAAChB,EAAA,CA7BWD,YAAY;AAAAqB,EAAA,GAAZrB,YAAY;AAAA,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}